
    let svg = new Visualization('gantt-chart');
    let gantt = new Gantt('main', this.diary);
    let scales  = new Scales(gantt);

    let fWidth = Config.sizes.width;
    let fHeight = Config.sizes.height;
    let fPadding = Config.sizes.padding;
    let leftPaneWidth = 80;

    svg
      .placeIn('#app')
      .setSizes(Config.sizes);

    gantt
      .placeIn(svg)
      .setSizes({
        width:  fWidth-leftPaneWidth,
        height: fHeight,
        padding: fPadding
      })
      .setPosition({
          left: leftPaneWidth,
          top: 0
      })
      .configRects(function(rects){
          let xScale = scales.getXScale();
          let yScale = scales.getYScale();
          let wScale = scales.getWidthScale();
          let hScale = scales.getHeightScale();
          let cScale = scales.getClassScale();

          rects
            .attr('class', cScale)
            .attr('transform', d=>{
              let time = d.inicio;
                  time = xScale(time);
              let task = d.taskName;
                  task = yScale(task);

              return `translate(${time}, ${task})`;
            })
            .attr('height', hScale)
            .attr('width', d=>wScale(d.duracao))
      });
    let ganttSizes = gantt.getSizes();
    let taskAxis = d3.axisLeft(scales.getYScale())
    // fwidth - leftpanewidth - padding
      .tickSize(-(fWidth - leftPaneWidth - 2*fPadding));
    let hourAxis = d3.axisBottom(scales.getXScale())
      .ticks(d3.timeMinute.every(30))
      .tickSize(-560)
      .tickFormat(d3.timeFormat('%H:%M'));

    let ganttsizes = gantt.getSizes();

    svg.getElement()
      .append('g')
      .attr('id', 'task-axis')
      .attr('class', 'axis')
      .attr('transform', `translate(${leftPaneWidth + ganttsizes.padding}, 0)`)
      .call(taskAxis)

    svg.getElement()
      .append('g')
      .attr('id', 'hour-axis')
      .attr('class', 'axis')
      .attr('transform', `translate(0, ${fHeight-fPadding})`)
      .call(hourAxis)
